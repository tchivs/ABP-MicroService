@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@using Microsoft.AspNetCore.RequestLocalization
@inject ILanguageProvider LanguageProvider
@inject NavigationManager NavigationManager
@inject IAbpRequestLocalizationOptionsProvider RequestLocalizationOptionsProvider
@if (languages != null && languages.Any())
{
    <li class="nav-item">
        @*<label>@_currentLanguage.DisplayName</label>*@
        <Select Items="@SelectedItems" Value="@_currentUiCultureName" OnSelectedItemChanged="@SetCulture">
        </Select>
    </li>
}
@code {
    public List<SelectedItem> SelectedItems { get; set; }
    public string _currentUiCultureName { get; set; }
    private IReadOnlyList<LanguageInfo> languages;
    private LanguageInfo _currentLanguage;
    string _last;
    protected override async Task OnInitializedAsync()
    {
        languages = await LanguageProvider.GetLanguagesAsync();
        var currentLanguage = languages.FindByCulture(
            CultureInfo.CurrentCulture.Name,
            CultureInfo.CurrentUICulture.Name
            );
        _last = currentLanguage.UiCultureName;
        if (currentLanguage == null)
        {
            var localizationOptions = await RequestLocalizationOptionsProvider.GetLocalizationOptionsAsync();
            if (localizationOptions.DefaultRequestCulture != null)
            {
                currentLanguage = new LanguageInfo(
                    localizationOptions.DefaultRequestCulture.Culture.Name,
                    localizationOptions.DefaultRequestCulture.UICulture.Name,
                    localizationOptions.DefaultRequestCulture.UICulture.DisplayName);
            }
            else
            {
                currentLanguage = new LanguageInfo(
                    CultureInfo.CurrentCulture.Name,
                    CultureInfo.CurrentUICulture.Name,
                    CultureInfo.CurrentUICulture.DisplayName);
            }
        }
        _currentLanguage = currentLanguage;
        _currentUiCultureName = _currentLanguage.UiCultureName;
        SelectedItems = new List<SelectedItem>();
        foreach (var item in languages)
        {
            SelectedItems.Add(new SelectedItem()
                {
                    Text = item.DisplayName,
                    Value = item.UiCultureName
                });
        }
        // _otherLanguages = languages.Where(l => l != _currentLanguage).ToImmutableList();
    }
    private Task SetCulture(SelectedItem item)
    {
        if (_last != item.Value)
        {
            var language = this.languages.First(x => x.UiCultureName == item.Value);
            this.ChangeLanguage(language);
        }

        return Task.CompletedTask;
    }
    private void ChangeLanguage(LanguageInfo language)
    {
        var relativeUrl = NavigationManager.Uri.RemovePreFix(NavigationManager.BaseUri).EnsureStartsWith('/');
        NavigationManager.NavigateTo(
            $"/Abp/Languages/Switch?culture={language.CultureName}&uiCulture={language.UiCultureName}&returnUrl={relativeUrl}",
            forceLoad: true
        );
    }
}
