@page "/system/role"
@using Volo.Abp.Identity
@using Volo.Abp.Identity.Localization
@using Admin.Blazor.Components
@attribute [Authorize(IdentityPermissions.Roles.Default)]
@inherits Tchivs.Abp.Blazor.Theme.Bootstrap.BootstrapComponent
<Card>
    <CardHeader>
        @L["Roles"]
    </CardHeader>
    <CardBody>
        <TableEx
            TItem=IdentityRoleDto
            TAppService=IIdentityRoleAppService
            TKey=Guid TGetListInput=GetIdentityRolesInput
            TCreateInput=IdentityRoleCreateDto
            TUpdateInput=IdentityRoleUpdateDto
            AutoGenerateColumns="false"
            CreatePolicyName="@IdentityPermissions.Roles.Create"
            UpdatePolicyName="@IdentityPermissions.Roles.Update"
            DeletePolicyName="@IdentityPermissions.Roles.Delete">
            <TableColumns>
                <TableColumn @bind-Field="@context.Name" Text="@L["RoleName"]"/>
                <TableColumn @bind-Field="@context.IsDefault" Text="@L["DisplayName:IsDefault"]"/>
                <TableColumn @bind-Field="@context.IsPublic" Text="@L["DisplayName:IsPublic"]"/>
            </TableColumns>
            <AddTemplate>
                <div class="row g-3 form-inline">
                    <div class="col-12">
                        <BootstrapInput @bind-Value="@context.Name" placeholder="角色名称"
                                        DisplayText=@L["RoleName"] maxlength="50"/>
                    </div>

                    <div class="col-12">
                        <Checkbox @bind-Value="@context.IsDefault"
                                  ShowAfterLabel="true"
                                  ShowLabel="false"
                                  DisplayText="@L["DisplayName:IsDefault"]"/>
                    </div>
                    <div class="col-12">
                        <Checkbox @bind-Value="@context.IsPublic"
                                  ShowAfterLabel="true"
                                  ShowLabel="false"
                                  DisplayText="@L["DisplayName:IsPublic"]"/>
                    </div>
                </div>
            </AddTemplate>
            <EditTemplate>
                <div class="row g-3 form-inline">
                    <div class="col-12">
                        <BootstrapInput @bind-Value="@context.Name"
                                        placeholder="角色名称" DisplayText=@L["RoleName"] maxlength="50"/>
                    </div>

                    <div class="col-12">
                        <Checkbox @bind-Value="@context.IsDefault"
                                  ShowAfterLabel="true"
                                  ShowLabel="false"
                                  DisplayText="@L["DisplayName:IsDefault"]"/>
                    </div>
                    <div class="col-12">
                        <Checkbox @bind-Value="@context.IsPublic"
                                  ShowAfterLabel="true"
                                  ShowLabel="false"
                                  DisplayText="@L["DisplayName:IsPublic"]"/>
                    </div>
                </div>
            </EditTemplate>
            <RowButtonTemplate>
                @if (this.HasManagePermissionsPermission)
                {
                    <Button Size="Size.ExtraSmall" Color="Color.Secondary" OnClick="@ClickPermissionCallback(context)" Icon="fa fa-shield" Text="@L["Permissions"]"/>
                }
            </RowButtonTemplate>
        </TableEx>
    </CardBody>
</Card>

@code {
    protected bool HasManagePermissionsPermission { get; set; }

    public Index()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    protected override async Task OnInitializedAsync()
    {
        HasManagePermissionsPermission =
            await AuthorizationService.IsGrantedAsync(IdentityPermissions.Roles.ManagePermissions);
    }

    EventCallback<MouseEventArgs> ClickPermissionCallback(IdentityRoleDto item) =>
        EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowPermission(item));

    private async Task ShowPermission(IdentityRoleDto context)
    {
        var op = new DialogOption()
        {
            Size = Size.Small,
            ShowFooter = false,
            Title = $"{L["Roles"]}{L["Permissions"]} - {context.Name}",
        };
        op.BodyTemplate = BootstrapDynamicComponent.CreateComponent<PermissionModal>(new KeyValuePair<string, object>[]
        {
            new(nameof(PermissionModal.ProviderName), "R"),
            new(nameof(PermissionModal.ProviderKey), context.Name.ToString()),
            new(nameof(PermissionModal.OnClose), new Action(async () => await op.Dialog.Close()))
        }).Render();
        
        await DialogService.Show(op);
    }

}