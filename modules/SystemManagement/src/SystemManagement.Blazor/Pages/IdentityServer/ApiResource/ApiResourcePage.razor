@page "/identityServer/apiResources"
@using global::SystemManagement.Permissions
@using Microsoft.AspNetCore.Components
@using SystemManagement.IdentityServer
@inherits SystemManagementComponent
@attribute [Authorize(SystemManagementPermissions.IdentityServer.ApiResource.Default)]
@using SystemManagement.IdentityServer.ApiScopes
@using SystemManagement.IdentityServer.ApiScopes.Dtos
@using SystemManagement.IdentityServer.Dtos
@using Console = System.Console
<Table
    TItem=ApiResourceOutput
    AutoGenerateColumns="false"
    IsMultipleSelect="true"
    ShowSkeleton="true"
    ShowLoading="true"
    ShowSearch="true"
    IsStriped="true"
    IsBordered="true"
    ShowExtendButtons="true"
    ShowLineNo="true"
    ShowDefaultButtons="true"
    IsPagination="true"
    PageItemsSource="PageItemsSource" ShowToolbar="true"
    EditDialogRowType="RowType.Inline"
    OnSaveAsync="OnSaveAsync" OnDeleteAsync="OnDeleteAsync"
    OnQueryAsync="OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" IsReadonlyWhenEdit="true" Text="@L["Name"]"/>
        <TableColumn @bind-Field="@context.DisplayName" Text="@L["DisplayName"]"/>
        <TableColumn @bind-Field="@context.Enabled" Text="@L["Enabled"]"/>
        <TableColumn @bind-Field="@context.AllowedAccessTokenSigningAlgorithms" Text="@L["AllowedAccessTokenSigningAlgorithms"]"/>
        <TableColumn @bind-Field="@context.ShowInDiscoveryDocument" Text="@L["ShowInDiscoveryDocument"]"/>
        <TableColumn @bind-Field="@context.Description" Text="@L["Description"]"/>
    </TableColumns>
    <EditTemplate>
        <AddUpdateApiResource Context="@context"></AddUpdateApiResource>
    </EditTemplate>
</Table>

@code {


    [Inject]
    public IApiResourceAppService AppService { get; set; }

    protected virtual IEnumerable<int> PageItemsSource => new int[] {4, 10, 20};

    private async Task<QueryData<ApiResourceOutput>> OnQueryAsync(QueryPageOptions options)
    {
        var input = new PagingApiRseourceListInput()
        {
            MaxResultCount = options.PageItems,
            SkipCount = options.PageIndex == 1 ? 0 : options.PageIndex * options.PageItems
        };
        var result = await AppService.GetListAsync(input);
        return new QueryData<ApiResourceOutput>()
        {
            Items = result.Items, TotalCount =(int) result.TotalCount
        };
    }

    private async Task<bool> OnSaveAsync(ApiResourceOutput model, ItemChangedType type)
    {
        bool result = false;
        try
        {
            if (type == ItemChangedType.Add)
            {
                await AppService.CreateAsync(ObjectMapper.Map<ApiResourceOutput, CreateApiResourceInput>(model));
            }
            else
            {
                await AppService.UpdateAsync(model.Id, ObjectMapper.Map<ApiResourceOutput, UpdateApiResourceInput>(model));
            }
            result = true;
        }
        catch (Exception e)
        {
            await this.HandleErrorAsync(e);
            result = false;
        }

        return result;
    }


    private async Task<bool> OnDeleteAsync(IEnumerable<ApiResourceOutput> arg)
    {
        bool success = false;
        try
        {
            foreach (var item in arg)
            {
                await this.AppService.DeleteAsync(item.Id);
            }
            success = true;
        }
        catch (Exception e)
        {
            success = false;
            await HandleErrorAsync(e);
        }

        return success;
    }

}