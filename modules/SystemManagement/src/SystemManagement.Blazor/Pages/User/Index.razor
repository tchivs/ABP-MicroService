@page "/system/user"
@using SystemManagement.Localization
@using Volo.Abp.Identity.Localization
@using Volo.Abp.Identity
@using Microsoft.Extensions.Localization
@using SystemManagement.Blazor.Components
@inherits Tchivs.Abp.Blazor.Theme.Bootstrap.BootstrapAbpComponentBase
@attribute [Authorize(IdentityPermissions.Users.Default)]
<Card>
    <CardHeader>
        @L["Users"]
    </CardHeader>
    <CardBody>
        <TableEx @ref="table"
                 TItem=IdentityUserDto
                 TAppService=IIdentityUserAppService
                 TKey=Guid TGetListInput=GetIdentityUsersInput
                 TCreateInput=IdentityUserCreateDto
                 TUpdateInput=IdentityUserUpdateDto
                 AutoGenerateColumns="false"
                 CreatePolicyName="@IdentityPermissions.Users.Create"
                 UpdatePolicyName="@IdentityPermissions.Users.Update"
                 DeletePolicyName="@IdentityPermissions.Users.Delete">
            <AddTemplate>
                <AddModal Context="@context"></AddModal>
            </AddTemplate>
            <EditTemplate>
                <EditModal Id="@table.Id" Context="@context"></EditModal>
            </EditTemplate>
            <TableColumns>
                <TableColumn @bind-Field="@context.UserName" Text="@L["UserName"]"/>
                <TableColumn @bind-Field="@context.Email" Text="@L["Email"]"/>
                <TableColumn @bind-Field="@context.PhoneNumber" Text="@L["PhoneNumber"]"/>
                <TableColumn @bind-Field="@context.CreationTime" Text="@L["CreationTime"]" FormatString="yyyy-MM-dd"/>
            </TableColumns>
            <RowButtonTemplate>
                @if (this.HasManagePermissionsPermission)
                {
                    <Button Size="Size.ExtraSmall" OnClick="@ClickPermissionCallback(context)" Color="Color.Secondary" Icon="fa fa-shield" Text="@L["Permissions"]"/>
                }
            </RowButtonTemplate>
        </TableEx>
    </CardBody>
</Card>
<DrawerComponent IsScroll="true" IsOpen="@PermissionIsOpen" Submit="@SavePermission">
    <HeaderTemplate>
        <h3>@L["Permission:RoleManagement"]</h3>
    </HeaderTemplate>
    <BodyTemplate>
        <PermissionModal @ref=_permissionModal></PermissionModal>
    </BodyTemplate>
</DrawerComponent>

@code {
    private bool PermissionIsOpen { get; set; }
    PermissionModal _permissionModal;
    protected bool HasManagePermissionsPermission { get; set; }

    private async Task SavePermission()
    {
        await _permissionModal.Save();
    }

    public Index()
    {
        LocalizationResource = typeof(IdentityResource);
    }

    [Inject]
    public IStringLocalizer<SystemManagementResource>? Localizer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HasManagePermissionsPermission =
            await AuthorizationService.IsGrantedAsync(IdentityPermissions.Users.ManagePermissions);
    }

    private ITable<Guid> table;

    EventCallback<MouseEventArgs> ClickPermissionCallback(IdentityUserDto item) =>
        EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowPermission(item));

    private async Task ShowPermission(IdentityUserDto context)
    {
        _permissionModal.ProviderKey = context.Id.ToString();
        _permissionModal.ProviderName = "U";
        await _permissionModal.ShowAsync();
        PermissionIsOpen = true;
    }

}