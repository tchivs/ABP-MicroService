@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@using Microsoft.AspNetCore.RequestLocalization
@inject ILanguageProvider LanguageProvider
@inject NavigationManager NavigationManager
@if (languages.Any())
{
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            @_currentLanguage.DisplayName
        </a>
        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
            @foreach (var lan in this.languages)
            {
                <li>
                    @if (lan == this._currentLanguage)
                    {
                        <a id="@lan.UiCultureName" class="dropdown-item active" @onclick="() => this.ChangeLanguage(lan)" href="#">@lan.DisplayName</a>
                    }
                    else
                    {
                        <a id="@lan.UiCultureName" class="dropdown-item" @onclick="() => this.ChangeLanguage(lan)" href="#">@lan.DisplayName</a>
                    }
                </li>
            }

        </ul>
    </li>
}

@code {
    private IReadOnlyList<LanguageInfo> languages;
    private LanguageInfo _currentLanguage;

    protected override async Task OnInitializedAsync()
    {
        languages = await LanguageProvider.GetLanguagesAsync();
        _currentLanguage = languages.FindByCulture(
            CultureInfo.CurrentCulture.Name,
            CultureInfo.CurrentUICulture.Name
            );

    // _otherLanguages = languages.Where(l => l != _currentLanguage).ToImmutableList();
    }

    private void ChangeLanguage(LanguageInfo language)
    {
        var relativeUrl = NavigationManager.Uri.RemovePreFix(NavigationManager.BaseUri).EnsureStartsWith('/');
        NavigationManager.NavigateTo(
            $"/Abp/Languages/Switch?culture={language.CultureName}&uiCulture={language.UiCultureName}&returnUrl={relativeUrl}",
            forceLoad: true
            );
    }

}